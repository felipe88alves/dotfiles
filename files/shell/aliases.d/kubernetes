# ----------------------------------------------------------

# KUBECTL

alias k="kubectl"
alias kg="kubectl get"
alias kgp="kubectl get pods"
alias kgpa="kubectl get pods -A"
alias kgpo="kubectl get pods -oyaml"
alias kgs="kubectl get services"
alias kgso="kubectl get services -oyaml"
alias kgd="kubectl get deploy"
alias kgdo="kubectl get deploy -oyaml"
alias kgj="kubectl get job"
alias kgjo="kubectl get job -oyaml"
alias kghr="kubectl get helmrelease"
alias kghrb="kubectl get helmrelease | grep -v True"
alias kghrba="kubectl get helmrelease -A | grep -v True"
alias kghro="kubectl get helmrelease -oyaml"
alias kghc="kubectl get helmchart"
alias kging="kubectl get ingress"
alias kgingo="kubectl get ingress -oyaml"
alias kgsec="kubectl get secret"
alias kgseco="kubectl get secret -oyaml"
alias kgrs="kubectl get replicaset"
alias kgo="kubectl get -oyaml"
alias kgoj="kubectl get -ojson"
alias kga="kubectl get all"
alias kgvap="kubectl get validatingadmissionpolicy"
alias kgvapb="kubectl get validatingadmissionpolicybinding"

alias kgall="kubectl api-resources --namespaced --verbs=list -o name | grep -v events | xargs -n 1 kubectl get --show-kind --ignore-not-found"
alias kgallc="kubectl api-resources --verbs=list -o name | grep -v events | xargs -n 1 kubectl get --show-kind --ignore-not-found"
alias kgalla="kubectl api-resources --verbs=list -o name | grep -v events | xargs -n 1 kubectl get --show-kind --ignore-not-found -A"
alias kapi="kubectl api-resources"
alias kapiv="kubectl api-versions"

alias kd="kubectl describe"
alias kdp="kubectl describe pod"
alias kds="kubectl describe service"
alias kdd="kubectl describe deployment"
alias kdhr="kubectl describe helmrelease"
alias kdhc="kubectl describe helmchart"
alias kding="kubectl describe ingress"
alias kdsec="kubectl describe secret"
alias kdrs="kubectl describe replicaset"

alias krr="kubectl rollout restart"


alias kdiff="kubectl diff -f"
alias kcrt="kubectl get clusterreleasetemplate"
alias kcrde="kubectl get clusterreleasedeployment"
alias kcrel="kubectl get crel -A"

alias kc="kubectl config"
alias kccc="kubectl config current-context"

alias kge="kubectl get events --sort-by='.lastTimestamp'"

function kgeres() {
    kubectl get events --sort-by='.lastTimestamp' --field-selector involvedObject.name="${1}"
}

function kclone() {
    kubectl get $1 $2 -oyaml | yq 'del(.metadata.ownerReferences, .metadata.generation, .metadata.resourceVersion, .metadata.uid, .metadata.creationTimestamp, .metadata.deletionTimestamp, .metadata.deletionGracePeriodTimestamp, .metadata.finalizers, .metadata.annotations."kubectl.kubernetes.io/last-applied-configuration", .status)'
}

alias kexec="kubectl exec -it"
function kbash() {
    kubectl exec -it $1 -- /bin/bash
}
function ksh() {
    kubectl exec -it $1 -- /bin/sh
}

alias kdel="kubectl delete"
alias ke="kubectl edit"
alias kl="kubectl logs"
alias klf="kubectl logs -f"
alias kaf="kubectl apply -f"
alias kak="kubectl apply -k"
alias ka="kubectl apply"

alias kct="kubectx"
alias kctls="kubectx | cat"
alias kns="kubens"
alias knsls="kubens | cat"
alias cctl="clusterctl"
alias ksw="switch"

alias kgpba="kubectl get pods -A | egrep -v '(Running|Completed)'"
alias kgpb="kubectl get pods | egrep -v '(Running|Completed)'"

## kubectl get status condition
function kcond(){
  kind=${1}
  condType=${2}
  condStatus=${3}
  local filter=".items[]| select(.status != null)|select(.status.conditions[] != null)|select([.status.conditions[]|select(.type == \"${condType}\" and .status == \"${condStatus}\")]|length == 1)"
  local table="([\"NAMESPACE\",\"NAME\"] | (., map(length*\"-\"))),(${filter} | [.metadata.namespace, .metadata.name]) | @tsv"
  \kubectl get ${kind} -o json | jq -r "${table}"
}

# ----------------------------------------------------------

# HELM

alias hls="helm ls -a"
alias hf="helm ls -a -f"
alias hlsa="helm ls -A -a"
alias hlsb="helm ls -a | egrep -v deployed"
alias hlsba="helm ls -A -a | egrep -v deployed"
alias hh="helm history"
alias hs="helm status"

## helm get resources
function hgra() {
    PROMPT_EOL_MARK='' helm get manifest "$1" | yq '[{"kind":.kind, "name":.metadata.name}] | .[] | [.kind, .name] | join(" ")' | xargs -L 1 -I {} /bin/bash -c 'kubectl get {} --show-kind' ''
}

## helm get resources with namespace
function hgran {
    PROMPT_EOL_MARK='' helm get manifest "$1" | yq '[{"namespace":.metadata.namespace, "kind":.kind, "name":.metadata.name}] | .[] | [.kind, .name, "-n", .namespace] | join(" ")' | grep -v "\-\-\-" | xargs -L 1 -I {} /bin/bash -c 'kubectl get {}' ''
}

function hgro() {
    helm get manifest "$1" | KIND="$2" NAME="$3" yq 'select(.kind == env(KIND) and .metadata.name == env(NAME))'
}

function hdiff() {
    helm get manifest "$1" | KIND="$2" NAME="$3" yq 'select(.kind == env(KIND) and .metadata.name == env(NAME))' | kubectl diff -f -
}

function hgmiss() {
    PROMPT_EOL_MARK='' helm get manifest "$1" | yq '[{"kind":.kind, "name":.metadata.name}] | .[] | [.kind, .name] | join(" ")' | xargs -L 1 -I {} /bin/bash -c 'kubectl get {} --show-kind' '' | grep "NotFound"
}

## helm list resources
function hlr {
    helm get manifest "$1" | yq '[{"kind":.kind, "name":.metadata.name}] | .[] | [.kind, .name] | join(" ")' | column -t
}

function hlrn {
    helm get manifest "$1" | yq '[{"kind":.kind, "namespace":.metadata.namespace, "name":.metadata.name}] | .[] | [.kind, .name, .namespace // "<empty>"] | join(" ")' | column -t
}

## helm list resources by kind
function hlrk {
    helm get manifest "$1" | KIND="$2" yq 'select(.kind == env(KIND)) | [{"kind":.kind, "name":.metadata.name}] | .[] | [.kind, .name] | del(.. | select(tag == "!!seq" and length == 0)) | join(" ")' | column -t
}

# ----------------------------------------------------------

# EVENT-ROUTER

## Check access to ServiceDesk
function er_check_all_sd() {
    kgp -n monitoring -l 'app=event-router' -oname | xargs -L 1 -I {} sh -c 'kubectl exec -n monitoring {} -c event-router -- curl -I -s -k -H "Content-Type: application/json" -H "Authorization: Basic ${SDAUTH}" https://servicedesk.eng.vmware.com/rest/servicedeskapi/servicedesk' ''
}

## Check access to JIRA
function er_check_all_jira() {
    kgp -n monitoring -l 'app=event-router' -oname | xargs -L 1 -I {} kubectl exec -n monitoring {} -c event-router -- curl -I -s -k -H "Content-Type: application/json" -H "Authorization: Basic ${SDAUTH}" https://jira.eng.vmware.com/rest/api/latest/issue/VDPENG-15300
}

## Check access to ServiceDesk - specific resource
function er_check_sd {
    kgp -n monitoring "$1" -oname | xargs -I {} kubectl exec -n monitoring {} -c event-router -- curl -I -s -k -H "Content-Type: application/json" -H "Authorization: Basic ${SDAUTH}" https://servicedesk.eng.vmware.com/rest/servicedeskapi/servicedesk
}

## Check access to JIRA - specific resource
function er_check_jira (){
    kgp -n monitoring "$@" -oname | xargs -I {} kubectl exec -n monitoring {} -c event-router -- curl -I -s -k -H "Content-Type: application/json" -H "Authorization: Basic ${SDAUTH}" https://jira.eng.vmware.com/rest/api/latest/issue/VDPENG-15300
}

## Find error in logs
function er_find_error (){
    stern er-event-router -n monitoring --since 2h --no-follow --only-log-lines | grep "$1"
}

# ----------------------------------------------------------

# SSL

## ssl cert check
function ssl_cert_check () {
    kgsec $1 -n $2 -o jsonpath="{.data.$3}" | base64 -d | openssl x509 -text -noout | grep -E "Subject:|Not After"
}


## cilium count policy per identity
# kgp -l k8s-app=cilium -n kube-system --no-headers | awk '{print $1}' | xargs -n1 -I {} /bin/bash -c "echo {} && kubectl exec -i {} -c cilium-agent -- /bin/sh -c \"cilium policy selectors | wc -l\""

## cilium count policy per identity > 50
# pol_query="cilium policy selectors -o json | jq 'group_by(.selector) | map({selector: .[0].selector, identities_count: .[0].identities|length})' | jq -r 'map(select(.identities_count > 50))' | jq -r 'sort_by(.identities_count)'"
# kgp -l k8s-app=cilium -n kube-system --no-headers | awk '{print $1}' | xargs -n1 -S1024 -I {} /bin/bash -c "echo {} && kubectl exec -i {} -c cilium-agent -- /bin/sh -c \"${pol_query}\""
